Despliegue en AWS usando un contenedor para la DB y otro para la APP

1. CREAR REPO "proyecto" y CARPETAS
    - src -> app
    - database -> db
    - env (paso 2)
    - guiaProyecto.txt
    - .gitignore
    - docker-compose.yml
    - README.md
    


2. CREAR AMBIENTE VIRTUAL
    cd proyecto
    python3 -m venv env
    source env/bin/activate

3. CREAR ARCHIVOS
    - crear un Docker file dentro de app/ (ver Anexo A)
    - requirements.txt dentro de app/
    - el programa debe llamarase app.py dentro de app/



4. MODIFICAR LOS ARCHIVOS DAO 
    - PASAR DE ESTO: 
        def connect(self):
            return pymysql.connect(host="localhost",user="root",password="",db="db_poo" )
    - A ESTO:
        def connect(self):
            return pymysql.connect(host="db",user="root",password="root",db="db_poo" )

    - localhost -> db (nombre del contenendor que ejcuta la base de datos)


5. MODIFICAR EL ARCHIVO db.sql
    - eliminar: drop database db_poo;



6. ZIPPEAR PROYECTO 
    - Tener listo el Dockerfile
    - Tener listo el docker-compose.yml
    - Tener listos los DAO.py con host="db" y contra="root"
    
    - Zippear (.zip) el proyecto entero sin env/
    - Copiar y pegar en la carpeta que contenga la llave key-server1.pem de AWS


7. INGRESAR A AWS EC2 instancias a conseguir la dirección IPv4 pública
    - si no existe una instancia -> créala (ANEXO C)
    - copy el IPV4 -> 3.129.149.163 - 18.119.1.248

8. INGRESAR A LA CARPETA QUE TIENE LA LLAVE DEL UBUNTU DE AWS    
    
    - abrir git desde windows o la terminal de linux
    - chmod 400 key-server2.pem
    - ssh -i key-server2.pem ubuntu@pasteIP
    - exit 
    - scp -i key-server2.pem docker-poo-flask.zip ubuntu@3.129.149.163:/home/ubuntu 
    - ssh -i key-server2.pem ubuntu@18.119.1.248 //verificar que se haya copiado el proyecto


9. COMANDOS PARA DOCKERIZAR DESDE EL UBUNTU DE AWS (Ingresa al repo )
    - cd nameRepo/
    - instalar Docker si no lo tienes 
    - docker ps //ver si hay servicios corriendo
    - docker system prune -a //borrar todo (imágenes, redes, etc) //INICAR DESDE CERO SI LO PREFIERES
    - unzip archivo.zip
    - docker-compose down //detener otros servicios entrando al repo correspondiente 
    - docker-compose build
    - docker-compose up -d  //iniciar
   
    



--------ANEXOS--------

A. Anexo A - Docker File
    FROM python:3.6

    EXPOSE 5000
    WORKDIR /app

    COPY requirements.txt /app
    RUN pip install -r requirements.txt

    COPY . /app
    CMD ["python","app.py"]

B. Anexo B - requirements.txt
    flask
    pymysql
    requests

c. Anexo C - Crear una instancia en AWS

    Free tier: In your first year includes 750 hours of t2.micro (or t3.micro in the Regions in which t2.micro is unavailable) instance usage on free tier AMIs per month, 750 hours of public IPv4 address usage per month, 30 GiB of EBS storage, 2 million IOs, 1 GB of snapshots, and 100 GB of bandwidth to the internet.

D. ANALIZAR LA MEMORIA DISPONIBLE EN MI UBUNTU DE AWS   (/dev/root)
    - df 
    - df -m //en megabytes

    - docker images //
    - docker ps -a// contenedores existentes
    - docker system prune -a //borrar todo (imágenes, redes, etc)




-------CONVENCIONES DEL PROYECTO ----
1. Poner "/" al final de cada URL tanto en el app.py como en los html


------PUNTOS PENDIENTES DEL PROYECTO---
1. Falta la función de editar información personal del usuario
